// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paraments_calib.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_paraments_5fcalib_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_paraments_5fcalib_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_paraments_5fcalib_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_paraments_5fcalib_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_paraments_5fcalib_2eproto;
class CameraMatrix;
struct CameraMatrixDefaultTypeInternal;
extern CameraMatrixDefaultTypeInternal _CameraMatrix_default_instance_;
class DistCoeffs;
struct DistCoeffsDefaultTypeInternal;
extern DistCoeffsDefaultTypeInternal _DistCoeffs_default_instance_;
class ParamentsCalib;
struct ParamentsCalibDefaultTypeInternal;
extern ParamentsCalibDefaultTypeInternal _ParamentsCalib_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CameraMatrix* Arena::CreateMaybeMessage<::CameraMatrix>(Arena*);
template<> ::DistCoeffs* Arena::CreateMaybeMessage<::DistCoeffs>(Arena*);
template<> ::ParamentsCalib* Arena::CreateMaybeMessage<::ParamentsCalib>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CameraMatrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CameraMatrix) */ {
 public:
  inline CameraMatrix() : CameraMatrix(nullptr) {}
  ~CameraMatrix() override;
  explicit constexpr CameraMatrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraMatrix(const CameraMatrix& from);
  CameraMatrix(CameraMatrix&& from) noexcept
    : CameraMatrix() {
    *this = ::std::move(from);
  }

  inline CameraMatrix& operator=(const CameraMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMatrix& operator=(CameraMatrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraMatrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraMatrix* internal_default_instance() {
    return reinterpret_cast<const CameraMatrix*>(
               &_CameraMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraMatrix& a, CameraMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraMatrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraMatrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraMatrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CameraMatrix& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMatrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CameraMatrix";
  }
  protected:
  explicit CameraMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFyFieldNumber = 2,
    kCxFieldNumber = 3,
    kCyFieldNumber = 4,
  };
  // float fx = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fy = 2;
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // float cx = 3;
  void clear_cx();
  float cx() const;
  void set_cx(float value);
  private:
  float _internal_cx() const;
  void _internal_set_cx(float value);
  public:

  // float cy = 4;
  void clear_cy();
  float cy() const;
  void set_cy(float value);
  private:
  float _internal_cy() const;
  void _internal_set_cy(float value);
  public:

  // @@protoc_insertion_point(class_scope:CameraMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fx_;
  float fy_;
  float cx_;
  float cy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paraments_5fcalib_2eproto;
};
// -------------------------------------------------------------------

class DistCoeffs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DistCoeffs) */ {
 public:
  inline DistCoeffs() : DistCoeffs(nullptr) {}
  ~DistCoeffs() override;
  explicit constexpr DistCoeffs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistCoeffs(const DistCoeffs& from);
  DistCoeffs(DistCoeffs&& from) noexcept
    : DistCoeffs() {
    *this = ::std::move(from);
  }

  inline DistCoeffs& operator=(const DistCoeffs& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistCoeffs& operator=(DistCoeffs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistCoeffs& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistCoeffs* internal_default_instance() {
    return reinterpret_cast<const DistCoeffs*>(
               &_DistCoeffs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DistCoeffs& a, DistCoeffs& b) {
    a.Swap(&b);
  }
  inline void Swap(DistCoeffs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistCoeffs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistCoeffs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistCoeffs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistCoeffs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistCoeffs& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistCoeffs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DistCoeffs";
  }
  protected:
  explicit DistCoeffs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kK1FieldNumber = 1,
    kK2FieldNumber = 2,
    kP1FieldNumber = 3,
    kP2FieldNumber = 4,
    kK3FieldNumber = 5,
  };
  // float k1 = 1;
  void clear_k1();
  float k1() const;
  void set_k1(float value);
  private:
  float _internal_k1() const;
  void _internal_set_k1(float value);
  public:

  // float k2 = 2;
  void clear_k2();
  float k2() const;
  void set_k2(float value);
  private:
  float _internal_k2() const;
  void _internal_set_k2(float value);
  public:

  // float p1 = 3;
  void clear_p1();
  float p1() const;
  void set_p1(float value);
  private:
  float _internal_p1() const;
  void _internal_set_p1(float value);
  public:

  // float p2 = 4;
  void clear_p2();
  float p2() const;
  void set_p2(float value);
  private:
  float _internal_p2() const;
  void _internal_set_p2(float value);
  public:

  // float k3 = 5;
  void clear_k3();
  float k3() const;
  void set_k3(float value);
  private:
  float _internal_k3() const;
  void _internal_set_k3(float value);
  public:

  // @@protoc_insertion_point(class_scope:DistCoeffs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float k1_;
  float k2_;
  float p1_;
  float p2_;
  float k3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paraments_5fcalib_2eproto;
};
// -------------------------------------------------------------------

class ParamentsCalib final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ParamentsCalib) */ {
 public:
  inline ParamentsCalib() : ParamentsCalib(nullptr) {}
  ~ParamentsCalib() override;
  explicit constexpr ParamentsCalib(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamentsCalib(const ParamentsCalib& from);
  ParamentsCalib(ParamentsCalib&& from) noexcept
    : ParamentsCalib() {
    *this = ::std::move(from);
  }

  inline ParamentsCalib& operator=(const ParamentsCalib& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamentsCalib& operator=(ParamentsCalib&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamentsCalib& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamentsCalib* internal_default_instance() {
    return reinterpret_cast<const ParamentsCalib*>(
               &_ParamentsCalib_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParamentsCalib& a, ParamentsCalib& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamentsCalib* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamentsCalib* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamentsCalib* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamentsCalib>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamentsCalib& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParamentsCalib& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamentsCalib* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ParamentsCalib";
  }
  protected:
  explicit ParamentsCalib(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWigglingError80FieldNumber = 5,
    kWigglingError100FieldNumber = 6,
    kFitting80FieldNumber = 7,
    kFitting100FieldNumber = 8,
    kTempOffset80FieldNumber = 9,
    kTempOffset100FieldNumber = 10,
    kFitting80OffsetFieldNumber = 13,
    kFitting100OffsetFieldNumber = 14,
    kOtherOffset1FieldNumber = 15,
    kOtherOffset2FieldNumber = 16,
    kOtherOffset3FieldNumber = 17,
    kOtherOffset4FieldNumber = 18,
    kOtherOffset5FieldNumber = 19,
    kSerialNumberFieldNumber = 11,
    kCameraMatrixFieldNumber = 1,
    kDistCoeffsFieldNumber = 2,
    kGlobalOffset80FieldNumber = 3,
    kGlobalOffset100FieldNumber = 4,
    kDepthOffsetFieldNumber = 12,
  };
  // repeated int32 wigglingError80 = 5;
  int wigglingerror80_size() const;
  private:
  int _internal_wigglingerror80_size() const;
  public:
  void clear_wigglingerror80();
  private:
  int32_t _internal_wigglingerror80(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_wigglingerror80() const;
  void _internal_add_wigglingerror80(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_wigglingerror80();
  public:
  int32_t wigglingerror80(int index) const;
  void set_wigglingerror80(int index, int32_t value);
  void add_wigglingerror80(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      wigglingerror80() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_wigglingerror80();

  // repeated int32 wigglingError100 = 6;
  int wigglingerror100_size() const;
  private:
  int _internal_wigglingerror100_size() const;
  public:
  void clear_wigglingerror100();
  private:
  int32_t _internal_wigglingerror100(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_wigglingerror100() const;
  void _internal_add_wigglingerror100(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_wigglingerror100();
  public:
  int32_t wigglingerror100(int index) const;
  void set_wigglingerror100(int index, int32_t value);
  void add_wigglingerror100(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      wigglingerror100() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_wigglingerror100();

  // repeated float fitting80 = 7;
  int fitting80_size() const;
  private:
  int _internal_fitting80_size() const;
  public:
  void clear_fitting80();
  private:
  float _internal_fitting80(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fitting80() const;
  void _internal_add_fitting80(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fitting80();
  public:
  float fitting80(int index) const;
  void set_fitting80(int index, float value);
  void add_fitting80(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fitting80() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fitting80();

  // repeated float fitting100 = 8;
  int fitting100_size() const;
  private:
  int _internal_fitting100_size() const;
  public:
  void clear_fitting100();
  private:
  float _internal_fitting100(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fitting100() const;
  void _internal_add_fitting100(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fitting100();
  public:
  float fitting100(int index) const;
  void set_fitting100(int index, float value);
  void add_fitting100(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fitting100() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fitting100();

  // repeated float tempOffset80 = 9;
  int tempoffset80_size() const;
  private:
  int _internal_tempoffset80_size() const;
  public:
  void clear_tempoffset80();
  private:
  float _internal_tempoffset80(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_tempoffset80() const;
  void _internal_add_tempoffset80(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_tempoffset80();
  public:
  float tempoffset80(int index) const;
  void set_tempoffset80(int index, float value);
  void add_tempoffset80(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tempoffset80() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tempoffset80();

  // repeated float tempOffset100 = 10;
  int tempoffset100_size() const;
  private:
  int _internal_tempoffset100_size() const;
  public:
  void clear_tempoffset100();
  private:
  float _internal_tempoffset100(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_tempoffset100() const;
  void _internal_add_tempoffset100(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_tempoffset100();
  public:
  float tempoffset100(int index) const;
  void set_tempoffset100(int index, float value);
  void add_tempoffset100(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      tempoffset100() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_tempoffset100();

  // repeated float fitting80Offset = 13;
  int fitting80offset_size() const;
  private:
  int _internal_fitting80offset_size() const;
  public:
  void clear_fitting80offset();
  private:
  float _internal_fitting80offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fitting80offset() const;
  void _internal_add_fitting80offset(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fitting80offset();
  public:
  float fitting80offset(int index) const;
  void set_fitting80offset(int index, float value);
  void add_fitting80offset(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fitting80offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fitting80offset();

  // repeated float fitting100Offset = 14;
  int fitting100offset_size() const;
  private:
  int _internal_fitting100offset_size() const;
  public:
  void clear_fitting100offset();
  private:
  float _internal_fitting100offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fitting100offset() const;
  void _internal_add_fitting100offset(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fitting100offset();
  public:
  float fitting100offset(int index) const;
  void set_fitting100offset(int index, float value);
  void add_fitting100offset(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fitting100offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fitting100offset();

  // repeated float otherOffset1 = 15;
  int otheroffset1_size() const;
  private:
  int _internal_otheroffset1_size() const;
  public:
  void clear_otheroffset1();
  private:
  float _internal_otheroffset1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_otheroffset1() const;
  void _internal_add_otheroffset1(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_otheroffset1();
  public:
  float otheroffset1(int index) const;
  void set_otheroffset1(int index, float value);
  void add_otheroffset1(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      otheroffset1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_otheroffset1();

  // repeated float otherOffset2 = 16;
  int otheroffset2_size() const;
  private:
  int _internal_otheroffset2_size() const;
  public:
  void clear_otheroffset2();
  private:
  float _internal_otheroffset2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_otheroffset2() const;
  void _internal_add_otheroffset2(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_otheroffset2();
  public:
  float otheroffset2(int index) const;
  void set_otheroffset2(int index, float value);
  void add_otheroffset2(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      otheroffset2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_otheroffset2();

  // repeated float otherOffset3 = 17;
  int otheroffset3_size() const;
  private:
  int _internal_otheroffset3_size() const;
  public:
  void clear_otheroffset3();
  private:
  float _internal_otheroffset3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_otheroffset3() const;
  void _internal_add_otheroffset3(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_otheroffset3();
  public:
  float otheroffset3(int index) const;
  void set_otheroffset3(int index, float value);
  void add_otheroffset3(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      otheroffset3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_otheroffset3();

  // repeated float otherOffset4 = 18;
  int otheroffset4_size() const;
  private:
  int _internal_otheroffset4_size() const;
  public:
  void clear_otheroffset4();
  private:
  float _internal_otheroffset4(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_otheroffset4() const;
  void _internal_add_otheroffset4(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_otheroffset4();
  public:
  float otheroffset4(int index) const;
  void set_otheroffset4(int index, float value);
  void add_otheroffset4(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      otheroffset4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_otheroffset4();

  // repeated float otherOffset5 = 19;
  int otheroffset5_size() const;
  private:
  int _internal_otheroffset5_size() const;
  public:
  void clear_otheroffset5();
  private:
  float _internal_otheroffset5(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_otheroffset5() const;
  void _internal_add_otheroffset5(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_otheroffset5();
  public:
  float otheroffset5(int index) const;
  void set_otheroffset5(int index, float value);
  void add_otheroffset5(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      otheroffset5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_otheroffset5();

  // string serialNumber = 11;
  void clear_serialnumber();
  const std::string& serialnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialnumber();
  PROTOBUF_NODISCARD std::string* release_serialnumber();
  void set_allocated_serialnumber(std::string* serialnumber);
  private:
  const std::string& _internal_serialnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialnumber(const std::string& value);
  std::string* _internal_mutable_serialnumber();
  public:

  // .CameraMatrix cameraMatrix = 1;
  bool has_cameramatrix() const;
  private:
  bool _internal_has_cameramatrix() const;
  public:
  void clear_cameramatrix();
  const ::CameraMatrix& cameramatrix() const;
  PROTOBUF_NODISCARD ::CameraMatrix* release_cameramatrix();
  ::CameraMatrix* mutable_cameramatrix();
  void set_allocated_cameramatrix(::CameraMatrix* cameramatrix);
  private:
  const ::CameraMatrix& _internal_cameramatrix() const;
  ::CameraMatrix* _internal_mutable_cameramatrix();
  public:
  void unsafe_arena_set_allocated_cameramatrix(
      ::CameraMatrix* cameramatrix);
  ::CameraMatrix* unsafe_arena_release_cameramatrix();

  // .DistCoeffs distCoeffs = 2;
  bool has_distcoeffs() const;
  private:
  bool _internal_has_distcoeffs() const;
  public:
  void clear_distcoeffs();
  const ::DistCoeffs& distcoeffs() const;
  PROTOBUF_NODISCARD ::DistCoeffs* release_distcoeffs();
  ::DistCoeffs* mutable_distcoeffs();
  void set_allocated_distcoeffs(::DistCoeffs* distcoeffs);
  private:
  const ::DistCoeffs& _internal_distcoeffs() const;
  ::DistCoeffs* _internal_mutable_distcoeffs();
  public:
  void unsafe_arena_set_allocated_distcoeffs(
      ::DistCoeffs* distcoeffs);
  ::DistCoeffs* unsafe_arena_release_distcoeffs();

  // int32 globalOffset80 = 3;
  void clear_globaloffset80();
  int32_t globaloffset80() const;
  void set_globaloffset80(int32_t value);
  private:
  int32_t _internal_globaloffset80() const;
  void _internal_set_globaloffset80(int32_t value);
  public:

  // int32 globalOffset100 = 4;
  void clear_globaloffset100();
  int32_t globaloffset100() const;
  void set_globaloffset100(int32_t value);
  private:
  int32_t _internal_globaloffset100() const;
  void _internal_set_globaloffset100(int32_t value);
  public:

  // int32 depthOffset = 12;
  void clear_depthoffset();
  int32_t depthoffset() const;
  void set_depthoffset(int32_t value);
  private:
  int32_t _internal_depthoffset() const;
  void _internal_set_depthoffset(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ParamentsCalib)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > wigglingerror80_;
  mutable std::atomic<int> _wigglingerror80_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > wigglingerror100_;
  mutable std::atomic<int> _wigglingerror100_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fitting80_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fitting100_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tempoffset80_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > tempoffset100_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fitting80offset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fitting100offset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > otheroffset1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > otheroffset2_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > otheroffset3_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > otheroffset4_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > otheroffset5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialnumber_;
  ::CameraMatrix* cameramatrix_;
  ::DistCoeffs* distcoeffs_;
  int32_t globaloffset80_;
  int32_t globaloffset100_;
  int32_t depthoffset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_paraments_5fcalib_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraMatrix

// float fx = 1;
inline void CameraMatrix::clear_fx() {
  fx_ = 0;
}
inline float CameraMatrix::_internal_fx() const {
  return fx_;
}
inline float CameraMatrix::fx() const {
  // @@protoc_insertion_point(field_get:CameraMatrix.fx)
  return _internal_fx();
}
inline void CameraMatrix::_internal_set_fx(float value) {
  
  fx_ = value;
}
inline void CameraMatrix::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:CameraMatrix.fx)
}

// float fy = 2;
inline void CameraMatrix::clear_fy() {
  fy_ = 0;
}
inline float CameraMatrix::_internal_fy() const {
  return fy_;
}
inline float CameraMatrix::fy() const {
  // @@protoc_insertion_point(field_get:CameraMatrix.fy)
  return _internal_fy();
}
inline void CameraMatrix::_internal_set_fy(float value) {
  
  fy_ = value;
}
inline void CameraMatrix::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:CameraMatrix.fy)
}

// float cx = 3;
inline void CameraMatrix::clear_cx() {
  cx_ = 0;
}
inline float CameraMatrix::_internal_cx() const {
  return cx_;
}
inline float CameraMatrix::cx() const {
  // @@protoc_insertion_point(field_get:CameraMatrix.cx)
  return _internal_cx();
}
inline void CameraMatrix::_internal_set_cx(float value) {
  
  cx_ = value;
}
inline void CameraMatrix::set_cx(float value) {
  _internal_set_cx(value);
  // @@protoc_insertion_point(field_set:CameraMatrix.cx)
}

// float cy = 4;
inline void CameraMatrix::clear_cy() {
  cy_ = 0;
}
inline float CameraMatrix::_internal_cy() const {
  return cy_;
}
inline float CameraMatrix::cy() const {
  // @@protoc_insertion_point(field_get:CameraMatrix.cy)
  return _internal_cy();
}
inline void CameraMatrix::_internal_set_cy(float value) {
  
  cy_ = value;
}
inline void CameraMatrix::set_cy(float value) {
  _internal_set_cy(value);
  // @@protoc_insertion_point(field_set:CameraMatrix.cy)
}

// -------------------------------------------------------------------

// DistCoeffs

// float k1 = 1;
inline void DistCoeffs::clear_k1() {
  k1_ = 0;
}
inline float DistCoeffs::_internal_k1() const {
  return k1_;
}
inline float DistCoeffs::k1() const {
  // @@protoc_insertion_point(field_get:DistCoeffs.k1)
  return _internal_k1();
}
inline void DistCoeffs::_internal_set_k1(float value) {
  
  k1_ = value;
}
inline void DistCoeffs::set_k1(float value) {
  _internal_set_k1(value);
  // @@protoc_insertion_point(field_set:DistCoeffs.k1)
}

// float k2 = 2;
inline void DistCoeffs::clear_k2() {
  k2_ = 0;
}
inline float DistCoeffs::_internal_k2() const {
  return k2_;
}
inline float DistCoeffs::k2() const {
  // @@protoc_insertion_point(field_get:DistCoeffs.k2)
  return _internal_k2();
}
inline void DistCoeffs::_internal_set_k2(float value) {
  
  k2_ = value;
}
inline void DistCoeffs::set_k2(float value) {
  _internal_set_k2(value);
  // @@protoc_insertion_point(field_set:DistCoeffs.k2)
}

// float p1 = 3;
inline void DistCoeffs::clear_p1() {
  p1_ = 0;
}
inline float DistCoeffs::_internal_p1() const {
  return p1_;
}
inline float DistCoeffs::p1() const {
  // @@protoc_insertion_point(field_get:DistCoeffs.p1)
  return _internal_p1();
}
inline void DistCoeffs::_internal_set_p1(float value) {
  
  p1_ = value;
}
inline void DistCoeffs::set_p1(float value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:DistCoeffs.p1)
}

// float p2 = 4;
inline void DistCoeffs::clear_p2() {
  p2_ = 0;
}
inline float DistCoeffs::_internal_p2() const {
  return p2_;
}
inline float DistCoeffs::p2() const {
  // @@protoc_insertion_point(field_get:DistCoeffs.p2)
  return _internal_p2();
}
inline void DistCoeffs::_internal_set_p2(float value) {
  
  p2_ = value;
}
inline void DistCoeffs::set_p2(float value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:DistCoeffs.p2)
}

// float k3 = 5;
inline void DistCoeffs::clear_k3() {
  k3_ = 0;
}
inline float DistCoeffs::_internal_k3() const {
  return k3_;
}
inline float DistCoeffs::k3() const {
  // @@protoc_insertion_point(field_get:DistCoeffs.k3)
  return _internal_k3();
}
inline void DistCoeffs::_internal_set_k3(float value) {
  
  k3_ = value;
}
inline void DistCoeffs::set_k3(float value) {
  _internal_set_k3(value);
  // @@protoc_insertion_point(field_set:DistCoeffs.k3)
}

// -------------------------------------------------------------------

// ParamentsCalib

// .CameraMatrix cameraMatrix = 1;
inline bool ParamentsCalib::_internal_has_cameramatrix() const {
  return this != internal_default_instance() && cameramatrix_ != nullptr;
}
inline bool ParamentsCalib::has_cameramatrix() const {
  return _internal_has_cameramatrix();
}
inline void ParamentsCalib::clear_cameramatrix() {
  if (GetArenaForAllocation() == nullptr && cameramatrix_ != nullptr) {
    delete cameramatrix_;
  }
  cameramatrix_ = nullptr;
}
inline const ::CameraMatrix& ParamentsCalib::_internal_cameramatrix() const {
  const ::CameraMatrix* p = cameramatrix_;
  return p != nullptr ? *p : reinterpret_cast<const ::CameraMatrix&>(
      ::_CameraMatrix_default_instance_);
}
inline const ::CameraMatrix& ParamentsCalib::cameramatrix() const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.cameraMatrix)
  return _internal_cameramatrix();
}
inline void ParamentsCalib::unsafe_arena_set_allocated_cameramatrix(
    ::CameraMatrix* cameramatrix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cameramatrix_);
  }
  cameramatrix_ = cameramatrix;
  if (cameramatrix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ParamentsCalib.cameraMatrix)
}
inline ::CameraMatrix* ParamentsCalib::release_cameramatrix() {
  
  ::CameraMatrix* temp = cameramatrix_;
  cameramatrix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CameraMatrix* ParamentsCalib::unsafe_arena_release_cameramatrix() {
  // @@protoc_insertion_point(field_release:ParamentsCalib.cameraMatrix)
  
  ::CameraMatrix* temp = cameramatrix_;
  cameramatrix_ = nullptr;
  return temp;
}
inline ::CameraMatrix* ParamentsCalib::_internal_mutable_cameramatrix() {
  
  if (cameramatrix_ == nullptr) {
    auto* p = CreateMaybeMessage<::CameraMatrix>(GetArenaForAllocation());
    cameramatrix_ = p;
  }
  return cameramatrix_;
}
inline ::CameraMatrix* ParamentsCalib::mutable_cameramatrix() {
  ::CameraMatrix* _msg = _internal_mutable_cameramatrix();
  // @@protoc_insertion_point(field_mutable:ParamentsCalib.cameraMatrix)
  return _msg;
}
inline void ParamentsCalib::set_allocated_cameramatrix(::CameraMatrix* cameramatrix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cameramatrix_;
  }
  if (cameramatrix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::CameraMatrix>::GetOwningArena(cameramatrix);
    if (message_arena != submessage_arena) {
      cameramatrix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameramatrix, submessage_arena);
    }
    
  } else {
    
  }
  cameramatrix_ = cameramatrix;
  // @@protoc_insertion_point(field_set_allocated:ParamentsCalib.cameraMatrix)
}

// .DistCoeffs distCoeffs = 2;
inline bool ParamentsCalib::_internal_has_distcoeffs() const {
  return this != internal_default_instance() && distcoeffs_ != nullptr;
}
inline bool ParamentsCalib::has_distcoeffs() const {
  return _internal_has_distcoeffs();
}
inline void ParamentsCalib::clear_distcoeffs() {
  if (GetArenaForAllocation() == nullptr && distcoeffs_ != nullptr) {
    delete distcoeffs_;
  }
  distcoeffs_ = nullptr;
}
inline const ::DistCoeffs& ParamentsCalib::_internal_distcoeffs() const {
  const ::DistCoeffs* p = distcoeffs_;
  return p != nullptr ? *p : reinterpret_cast<const ::DistCoeffs&>(
      ::_DistCoeffs_default_instance_);
}
inline const ::DistCoeffs& ParamentsCalib::distcoeffs() const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.distCoeffs)
  return _internal_distcoeffs();
}
inline void ParamentsCalib::unsafe_arena_set_allocated_distcoeffs(
    ::DistCoeffs* distcoeffs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distcoeffs_);
  }
  distcoeffs_ = distcoeffs;
  if (distcoeffs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ParamentsCalib.distCoeffs)
}
inline ::DistCoeffs* ParamentsCalib::release_distcoeffs() {
  
  ::DistCoeffs* temp = distcoeffs_;
  distcoeffs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::DistCoeffs* ParamentsCalib::unsafe_arena_release_distcoeffs() {
  // @@protoc_insertion_point(field_release:ParamentsCalib.distCoeffs)
  
  ::DistCoeffs* temp = distcoeffs_;
  distcoeffs_ = nullptr;
  return temp;
}
inline ::DistCoeffs* ParamentsCalib::_internal_mutable_distcoeffs() {
  
  if (distcoeffs_ == nullptr) {
    auto* p = CreateMaybeMessage<::DistCoeffs>(GetArenaForAllocation());
    distcoeffs_ = p;
  }
  return distcoeffs_;
}
inline ::DistCoeffs* ParamentsCalib::mutable_distcoeffs() {
  ::DistCoeffs* _msg = _internal_mutable_distcoeffs();
  // @@protoc_insertion_point(field_mutable:ParamentsCalib.distCoeffs)
  return _msg;
}
inline void ParamentsCalib::set_allocated_distcoeffs(::DistCoeffs* distcoeffs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete distcoeffs_;
  }
  if (distcoeffs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::DistCoeffs>::GetOwningArena(distcoeffs);
    if (message_arena != submessage_arena) {
      distcoeffs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distcoeffs, submessage_arena);
    }
    
  } else {
    
  }
  distcoeffs_ = distcoeffs;
  // @@protoc_insertion_point(field_set_allocated:ParamentsCalib.distCoeffs)
}

// int32 globalOffset80 = 3;
inline void ParamentsCalib::clear_globaloffset80() {
  globaloffset80_ = 0;
}
inline int32_t ParamentsCalib::_internal_globaloffset80() const {
  return globaloffset80_;
}
inline int32_t ParamentsCalib::globaloffset80() const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.globalOffset80)
  return _internal_globaloffset80();
}
inline void ParamentsCalib::_internal_set_globaloffset80(int32_t value) {
  
  globaloffset80_ = value;
}
inline void ParamentsCalib::set_globaloffset80(int32_t value) {
  _internal_set_globaloffset80(value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.globalOffset80)
}

// int32 globalOffset100 = 4;
inline void ParamentsCalib::clear_globaloffset100() {
  globaloffset100_ = 0;
}
inline int32_t ParamentsCalib::_internal_globaloffset100() const {
  return globaloffset100_;
}
inline int32_t ParamentsCalib::globaloffset100() const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.globalOffset100)
  return _internal_globaloffset100();
}
inline void ParamentsCalib::_internal_set_globaloffset100(int32_t value) {
  
  globaloffset100_ = value;
}
inline void ParamentsCalib::set_globaloffset100(int32_t value) {
  _internal_set_globaloffset100(value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.globalOffset100)
}

// repeated int32 wigglingError80 = 5;
inline int ParamentsCalib::_internal_wigglingerror80_size() const {
  return wigglingerror80_.size();
}
inline int ParamentsCalib::wigglingerror80_size() const {
  return _internal_wigglingerror80_size();
}
inline void ParamentsCalib::clear_wigglingerror80() {
  wigglingerror80_.Clear();
}
inline int32_t ParamentsCalib::_internal_wigglingerror80(int index) const {
  return wigglingerror80_.Get(index);
}
inline int32_t ParamentsCalib::wigglingerror80(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.wigglingError80)
  return _internal_wigglingerror80(index);
}
inline void ParamentsCalib::set_wigglingerror80(int index, int32_t value) {
  wigglingerror80_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.wigglingError80)
}
inline void ParamentsCalib::_internal_add_wigglingerror80(int32_t value) {
  wigglingerror80_.Add(value);
}
inline void ParamentsCalib::add_wigglingerror80(int32_t value) {
  _internal_add_wigglingerror80(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.wigglingError80)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ParamentsCalib::_internal_wigglingerror80() const {
  return wigglingerror80_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ParamentsCalib::wigglingerror80() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.wigglingError80)
  return _internal_wigglingerror80();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ParamentsCalib::_internal_mutable_wigglingerror80() {
  return &wigglingerror80_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ParamentsCalib::mutable_wigglingerror80() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.wigglingError80)
  return _internal_mutable_wigglingerror80();
}

// repeated int32 wigglingError100 = 6;
inline int ParamentsCalib::_internal_wigglingerror100_size() const {
  return wigglingerror100_.size();
}
inline int ParamentsCalib::wigglingerror100_size() const {
  return _internal_wigglingerror100_size();
}
inline void ParamentsCalib::clear_wigglingerror100() {
  wigglingerror100_.Clear();
}
inline int32_t ParamentsCalib::_internal_wigglingerror100(int index) const {
  return wigglingerror100_.Get(index);
}
inline int32_t ParamentsCalib::wigglingerror100(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.wigglingError100)
  return _internal_wigglingerror100(index);
}
inline void ParamentsCalib::set_wigglingerror100(int index, int32_t value) {
  wigglingerror100_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.wigglingError100)
}
inline void ParamentsCalib::_internal_add_wigglingerror100(int32_t value) {
  wigglingerror100_.Add(value);
}
inline void ParamentsCalib::add_wigglingerror100(int32_t value) {
  _internal_add_wigglingerror100(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.wigglingError100)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ParamentsCalib::_internal_wigglingerror100() const {
  return wigglingerror100_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ParamentsCalib::wigglingerror100() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.wigglingError100)
  return _internal_wigglingerror100();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ParamentsCalib::_internal_mutable_wigglingerror100() {
  return &wigglingerror100_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ParamentsCalib::mutable_wigglingerror100() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.wigglingError100)
  return _internal_mutable_wigglingerror100();
}

// repeated float fitting80 = 7;
inline int ParamentsCalib::_internal_fitting80_size() const {
  return fitting80_.size();
}
inline int ParamentsCalib::fitting80_size() const {
  return _internal_fitting80_size();
}
inline void ParamentsCalib::clear_fitting80() {
  fitting80_.Clear();
}
inline float ParamentsCalib::_internal_fitting80(int index) const {
  return fitting80_.Get(index);
}
inline float ParamentsCalib::fitting80(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.fitting80)
  return _internal_fitting80(index);
}
inline void ParamentsCalib::set_fitting80(int index, float value) {
  fitting80_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.fitting80)
}
inline void ParamentsCalib::_internal_add_fitting80(float value) {
  fitting80_.Add(value);
}
inline void ParamentsCalib::add_fitting80(float value) {
  _internal_add_fitting80(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.fitting80)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_fitting80() const {
  return fitting80_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::fitting80() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.fitting80)
  return _internal_fitting80();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_fitting80() {
  return &fitting80_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_fitting80() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.fitting80)
  return _internal_mutable_fitting80();
}

// repeated float fitting100 = 8;
inline int ParamentsCalib::_internal_fitting100_size() const {
  return fitting100_.size();
}
inline int ParamentsCalib::fitting100_size() const {
  return _internal_fitting100_size();
}
inline void ParamentsCalib::clear_fitting100() {
  fitting100_.Clear();
}
inline float ParamentsCalib::_internal_fitting100(int index) const {
  return fitting100_.Get(index);
}
inline float ParamentsCalib::fitting100(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.fitting100)
  return _internal_fitting100(index);
}
inline void ParamentsCalib::set_fitting100(int index, float value) {
  fitting100_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.fitting100)
}
inline void ParamentsCalib::_internal_add_fitting100(float value) {
  fitting100_.Add(value);
}
inline void ParamentsCalib::add_fitting100(float value) {
  _internal_add_fitting100(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.fitting100)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_fitting100() const {
  return fitting100_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::fitting100() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.fitting100)
  return _internal_fitting100();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_fitting100() {
  return &fitting100_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_fitting100() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.fitting100)
  return _internal_mutable_fitting100();
}

// repeated float tempOffset80 = 9;
inline int ParamentsCalib::_internal_tempoffset80_size() const {
  return tempoffset80_.size();
}
inline int ParamentsCalib::tempoffset80_size() const {
  return _internal_tempoffset80_size();
}
inline void ParamentsCalib::clear_tempoffset80() {
  tempoffset80_.Clear();
}
inline float ParamentsCalib::_internal_tempoffset80(int index) const {
  return tempoffset80_.Get(index);
}
inline float ParamentsCalib::tempoffset80(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.tempOffset80)
  return _internal_tempoffset80(index);
}
inline void ParamentsCalib::set_tempoffset80(int index, float value) {
  tempoffset80_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.tempOffset80)
}
inline void ParamentsCalib::_internal_add_tempoffset80(float value) {
  tempoffset80_.Add(value);
}
inline void ParamentsCalib::add_tempoffset80(float value) {
  _internal_add_tempoffset80(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.tempOffset80)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_tempoffset80() const {
  return tempoffset80_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::tempoffset80() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.tempOffset80)
  return _internal_tempoffset80();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_tempoffset80() {
  return &tempoffset80_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_tempoffset80() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.tempOffset80)
  return _internal_mutable_tempoffset80();
}

// repeated float tempOffset100 = 10;
inline int ParamentsCalib::_internal_tempoffset100_size() const {
  return tempoffset100_.size();
}
inline int ParamentsCalib::tempoffset100_size() const {
  return _internal_tempoffset100_size();
}
inline void ParamentsCalib::clear_tempoffset100() {
  tempoffset100_.Clear();
}
inline float ParamentsCalib::_internal_tempoffset100(int index) const {
  return tempoffset100_.Get(index);
}
inline float ParamentsCalib::tempoffset100(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.tempOffset100)
  return _internal_tempoffset100(index);
}
inline void ParamentsCalib::set_tempoffset100(int index, float value) {
  tempoffset100_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.tempOffset100)
}
inline void ParamentsCalib::_internal_add_tempoffset100(float value) {
  tempoffset100_.Add(value);
}
inline void ParamentsCalib::add_tempoffset100(float value) {
  _internal_add_tempoffset100(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.tempOffset100)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_tempoffset100() const {
  return tempoffset100_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::tempoffset100() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.tempOffset100)
  return _internal_tempoffset100();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_tempoffset100() {
  return &tempoffset100_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_tempoffset100() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.tempOffset100)
  return _internal_mutable_tempoffset100();
}

// string serialNumber = 11;
inline void ParamentsCalib::clear_serialnumber() {
  serialnumber_.ClearToEmpty();
}
inline const std::string& ParamentsCalib::serialnumber() const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.serialNumber)
  return _internal_serialnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParamentsCalib::set_serialnumber(ArgT0&& arg0, ArgT... args) {
 
 serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ParamentsCalib.serialNumber)
}
inline std::string* ParamentsCalib::mutable_serialnumber() {
  std::string* _s = _internal_mutable_serialnumber();
  // @@protoc_insertion_point(field_mutable:ParamentsCalib.serialNumber)
  return _s;
}
inline const std::string& ParamentsCalib::_internal_serialnumber() const {
  return serialnumber_.Get();
}
inline void ParamentsCalib::_internal_set_serialnumber(const std::string& value) {
  
  serialnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ParamentsCalib::_internal_mutable_serialnumber() {
  
  return serialnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ParamentsCalib::release_serialnumber() {
  // @@protoc_insertion_point(field_release:ParamentsCalib.serialNumber)
  return serialnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ParamentsCalib::set_allocated_serialnumber(std::string* serialnumber) {
  if (serialnumber != nullptr) {
    
  } else {
    
  }
  serialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialnumber,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialnumber_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ParamentsCalib.serialNumber)
}

// int32 depthOffset = 12;
inline void ParamentsCalib::clear_depthoffset() {
  depthoffset_ = 0;
}
inline int32_t ParamentsCalib::_internal_depthoffset() const {
  return depthoffset_;
}
inline int32_t ParamentsCalib::depthoffset() const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.depthOffset)
  return _internal_depthoffset();
}
inline void ParamentsCalib::_internal_set_depthoffset(int32_t value) {
  
  depthoffset_ = value;
}
inline void ParamentsCalib::set_depthoffset(int32_t value) {
  _internal_set_depthoffset(value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.depthOffset)
}

// repeated float fitting80Offset = 13;
inline int ParamentsCalib::_internal_fitting80offset_size() const {
  return fitting80offset_.size();
}
inline int ParamentsCalib::fitting80offset_size() const {
  return _internal_fitting80offset_size();
}
inline void ParamentsCalib::clear_fitting80offset() {
  fitting80offset_.Clear();
}
inline float ParamentsCalib::_internal_fitting80offset(int index) const {
  return fitting80offset_.Get(index);
}
inline float ParamentsCalib::fitting80offset(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.fitting80Offset)
  return _internal_fitting80offset(index);
}
inline void ParamentsCalib::set_fitting80offset(int index, float value) {
  fitting80offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.fitting80Offset)
}
inline void ParamentsCalib::_internal_add_fitting80offset(float value) {
  fitting80offset_.Add(value);
}
inline void ParamentsCalib::add_fitting80offset(float value) {
  _internal_add_fitting80offset(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.fitting80Offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_fitting80offset() const {
  return fitting80offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::fitting80offset() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.fitting80Offset)
  return _internal_fitting80offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_fitting80offset() {
  return &fitting80offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_fitting80offset() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.fitting80Offset)
  return _internal_mutable_fitting80offset();
}

// repeated float fitting100Offset = 14;
inline int ParamentsCalib::_internal_fitting100offset_size() const {
  return fitting100offset_.size();
}
inline int ParamentsCalib::fitting100offset_size() const {
  return _internal_fitting100offset_size();
}
inline void ParamentsCalib::clear_fitting100offset() {
  fitting100offset_.Clear();
}
inline float ParamentsCalib::_internal_fitting100offset(int index) const {
  return fitting100offset_.Get(index);
}
inline float ParamentsCalib::fitting100offset(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.fitting100Offset)
  return _internal_fitting100offset(index);
}
inline void ParamentsCalib::set_fitting100offset(int index, float value) {
  fitting100offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.fitting100Offset)
}
inline void ParamentsCalib::_internal_add_fitting100offset(float value) {
  fitting100offset_.Add(value);
}
inline void ParamentsCalib::add_fitting100offset(float value) {
  _internal_add_fitting100offset(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.fitting100Offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_fitting100offset() const {
  return fitting100offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::fitting100offset() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.fitting100Offset)
  return _internal_fitting100offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_fitting100offset() {
  return &fitting100offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_fitting100offset() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.fitting100Offset)
  return _internal_mutable_fitting100offset();
}

// repeated float otherOffset1 = 15;
inline int ParamentsCalib::_internal_otheroffset1_size() const {
  return otheroffset1_.size();
}
inline int ParamentsCalib::otheroffset1_size() const {
  return _internal_otheroffset1_size();
}
inline void ParamentsCalib::clear_otheroffset1() {
  otheroffset1_.Clear();
}
inline float ParamentsCalib::_internal_otheroffset1(int index) const {
  return otheroffset1_.Get(index);
}
inline float ParamentsCalib::otheroffset1(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.otherOffset1)
  return _internal_otheroffset1(index);
}
inline void ParamentsCalib::set_otheroffset1(int index, float value) {
  otheroffset1_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.otherOffset1)
}
inline void ParamentsCalib::_internal_add_otheroffset1(float value) {
  otheroffset1_.Add(value);
}
inline void ParamentsCalib::add_otheroffset1(float value) {
  _internal_add_otheroffset1(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.otherOffset1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_otheroffset1() const {
  return otheroffset1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::otheroffset1() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.otherOffset1)
  return _internal_otheroffset1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_otheroffset1() {
  return &otheroffset1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_otheroffset1() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.otherOffset1)
  return _internal_mutable_otheroffset1();
}

// repeated float otherOffset2 = 16;
inline int ParamentsCalib::_internal_otheroffset2_size() const {
  return otheroffset2_.size();
}
inline int ParamentsCalib::otheroffset2_size() const {
  return _internal_otheroffset2_size();
}
inline void ParamentsCalib::clear_otheroffset2() {
  otheroffset2_.Clear();
}
inline float ParamentsCalib::_internal_otheroffset2(int index) const {
  return otheroffset2_.Get(index);
}
inline float ParamentsCalib::otheroffset2(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.otherOffset2)
  return _internal_otheroffset2(index);
}
inline void ParamentsCalib::set_otheroffset2(int index, float value) {
  otheroffset2_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.otherOffset2)
}
inline void ParamentsCalib::_internal_add_otheroffset2(float value) {
  otheroffset2_.Add(value);
}
inline void ParamentsCalib::add_otheroffset2(float value) {
  _internal_add_otheroffset2(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.otherOffset2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_otheroffset2() const {
  return otheroffset2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::otheroffset2() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.otherOffset2)
  return _internal_otheroffset2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_otheroffset2() {
  return &otheroffset2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_otheroffset2() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.otherOffset2)
  return _internal_mutable_otheroffset2();
}

// repeated float otherOffset3 = 17;
inline int ParamentsCalib::_internal_otheroffset3_size() const {
  return otheroffset3_.size();
}
inline int ParamentsCalib::otheroffset3_size() const {
  return _internal_otheroffset3_size();
}
inline void ParamentsCalib::clear_otheroffset3() {
  otheroffset3_.Clear();
}
inline float ParamentsCalib::_internal_otheroffset3(int index) const {
  return otheroffset3_.Get(index);
}
inline float ParamentsCalib::otheroffset3(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.otherOffset3)
  return _internal_otheroffset3(index);
}
inline void ParamentsCalib::set_otheroffset3(int index, float value) {
  otheroffset3_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.otherOffset3)
}
inline void ParamentsCalib::_internal_add_otheroffset3(float value) {
  otheroffset3_.Add(value);
}
inline void ParamentsCalib::add_otheroffset3(float value) {
  _internal_add_otheroffset3(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.otherOffset3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_otheroffset3() const {
  return otheroffset3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::otheroffset3() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.otherOffset3)
  return _internal_otheroffset3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_otheroffset3() {
  return &otheroffset3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_otheroffset3() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.otherOffset3)
  return _internal_mutable_otheroffset3();
}

// repeated float otherOffset4 = 18;
inline int ParamentsCalib::_internal_otheroffset4_size() const {
  return otheroffset4_.size();
}
inline int ParamentsCalib::otheroffset4_size() const {
  return _internal_otheroffset4_size();
}
inline void ParamentsCalib::clear_otheroffset4() {
  otheroffset4_.Clear();
}
inline float ParamentsCalib::_internal_otheroffset4(int index) const {
  return otheroffset4_.Get(index);
}
inline float ParamentsCalib::otheroffset4(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.otherOffset4)
  return _internal_otheroffset4(index);
}
inline void ParamentsCalib::set_otheroffset4(int index, float value) {
  otheroffset4_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.otherOffset4)
}
inline void ParamentsCalib::_internal_add_otheroffset4(float value) {
  otheroffset4_.Add(value);
}
inline void ParamentsCalib::add_otheroffset4(float value) {
  _internal_add_otheroffset4(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.otherOffset4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_otheroffset4() const {
  return otheroffset4_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::otheroffset4() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.otherOffset4)
  return _internal_otheroffset4();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_otheroffset4() {
  return &otheroffset4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_otheroffset4() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.otherOffset4)
  return _internal_mutable_otheroffset4();
}

// repeated float otherOffset5 = 19;
inline int ParamentsCalib::_internal_otheroffset5_size() const {
  return otheroffset5_.size();
}
inline int ParamentsCalib::otheroffset5_size() const {
  return _internal_otheroffset5_size();
}
inline void ParamentsCalib::clear_otheroffset5() {
  otheroffset5_.Clear();
}
inline float ParamentsCalib::_internal_otheroffset5(int index) const {
  return otheroffset5_.Get(index);
}
inline float ParamentsCalib::otheroffset5(int index) const {
  // @@protoc_insertion_point(field_get:ParamentsCalib.otherOffset5)
  return _internal_otheroffset5(index);
}
inline void ParamentsCalib::set_otheroffset5(int index, float value) {
  otheroffset5_.Set(index, value);
  // @@protoc_insertion_point(field_set:ParamentsCalib.otherOffset5)
}
inline void ParamentsCalib::_internal_add_otheroffset5(float value) {
  otheroffset5_.Add(value);
}
inline void ParamentsCalib::add_otheroffset5(float value) {
  _internal_add_otheroffset5(value);
  // @@protoc_insertion_point(field_add:ParamentsCalib.otherOffset5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::_internal_otheroffset5() const {
  return otheroffset5_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ParamentsCalib::otheroffset5() const {
  // @@protoc_insertion_point(field_list:ParamentsCalib.otherOffset5)
  return _internal_otheroffset5();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::_internal_mutable_otheroffset5() {
  return &otheroffset5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ParamentsCalib::mutable_otheroffset5() {
  // @@protoc_insertion_point(field_mutable_list:ParamentsCalib.otherOffset5)
  return _internal_mutable_otheroffset5();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_paraments_5fcalib_2eproto
